# This file is managed by Puppet

# SINGULARITY.CONF
# This is the global configuration file for Singularity. This file controls
# what the container is allowed to do on a particular host, and as a result
# this file must be owned by root.


# ALLOW SETUID: [BOOL]
# DEFAULT: yes
# Should we allow users to utilize the setuid program flow within Singularity?
# note1: This is the default mode, and to utilize all features, this option
# will need to be enabled.
# note2: If this option is disabled, it will rely on the user namespace
# exclusively which has not been integrated equally between the different
# Linux distributions.
<% if scope.lookupvar('::singularity::allow_setuid') -%>
allow setuid = yes
<% else -%>
allow setuid = no
<% end -%>


# MAX LOOP DEVICES: [INT]
# DEFAULT: 256
# Set the maximum number of loop devices that Singularity should ever attempt
# to utilize.
max loop devices = <%= scope.lookupvar('::singularity::max_loop_devices') %>


# ALLOW PID NS: [BOOL]
# DEFAULT: yes
# Should we allow users to request the PID namespace? Note that for some HPC
# resources, the PID namespace may confuse the resource manager and break how
# some MPI implementations utilize shared memory. (note, on some older
# systems, the PID namespace is always used)
<% if scope.lookupvar('::singularity::allow_pid_ns') -%>
allow pid ns = yes
<% else -%>
allow pid ns = no
<% end -%>


# CONFIG PASSWD: [BOOL]
# DEFAULT: yes
# If /etc/passwd exists within the container, this will automatically append
# an entry for the calling user.
<% if scope.lookupvar('::singularity::config_passwd') -%>
config passwd = yes
<% else -%>
config passwd = no
<% end -%>


# CONFIG GROUP: [BOOL]
# DEFAULT: yes
# If /etc/group exists within the container, this will automatically append
# group entries for the calling user.
<% if scope.lookupvar('::singularity::config_group') -%>
config group = yes
<% else -%>
config group = no
<% end -%>


# CONFIG RESOLV_CONF: [BOOL]
# DEFAULT: yes
# If there is a bind point within the container, use the host's
# /etc/resolv.conf.
<% if scope.lookupvar('::singularity::config_resolv_conf') -%>
config resolv_conf = yes
<% else -%>
config resolv_conf = no
<% end -%>


# MOUNT PROC: [BOOL]
# DEFAULT: yes
# Should we automatically bind mount /proc within the container?
<% if scope.lookupvar('::singularity::mount_proc') -%>
mount proc = yes
<% else -%>
mount proc = no
<% end -%>


# MOUNT SYS: [BOOL]
# DEFAULT: yes
# Should we automatically bind mount /sys within the container?
<% if scope.lookupvar('::singularity::mount_sys') -%>
mount sys = yes
<% else -%>
mount sys = no
<% end -%>


# MOUNT DEV: [yes/no/minimal]
# DEFAULT: yes
# Should we automatically bind mount /dev within the container? If 'minimal'
# is chosen, then only 'null', 'zero', 'random', 'urandom', and 'shm' will
# be included (the same effect as the --contain options)
<% mount_dev = scope.lookupvar('::singularity::mount_dev') -%>
<% if !! mount_dev == mount_dev -%>
<% if mount_dev -%>
mount dev = yes
<% else -%>
mount dev = no
<% end -%>
<% else -%>
mount dev = <%= mount_dev %>
<% end -%>


# MOUNT DEVPTS: [BOOL]
# DEFAULT: no
# Should we mount a new instance of devpts if there is a 'minimal'
# /dev, or -C is passed?  Note, this requires that your kernel was
# configured with CONFIG_DEVPTS_MULTIPLE_INSTANCES=y, or that you're
# running kernel 4.7 or newer.  The Default is no, as enabling it on
# systems without support for multiple devpts instances could result
# in a shared devpts filesystem, and could potentially make the host
# system mount of devpts unusable.
<% if scope.lookupvar('::singularity::mount_devpts') -%>
mount devpts = yes
<% else -%>
mount devpts = no
<% end -%>


# MOUNT HOME: [BOOL]
# DEFAULT: yes
# Should we automatically determine the calling user's home directory and
# attempt to mount it's base path into the container? If the --contain option
# is used, the home directory will be created within the session directory or
# can be overridden with the SINGULARITY_HOME or SINGULARITY_WORKDIR
# environment variables (or their corresponding command line options).
<% if scope.lookupvar('::singularity::mount_home') -%>
mount home = yes
<% else -%>
mount home = no
<% end -%>


# MOUNT TMP: [BOOL]
# DEFAULT: yes
# Should we automatically bind mount /tmp and /var/tmp into the container? If
# the --contain option is used, both tmp locations will be created in the
# session directory or can be specified via the  SINGULARITY_WORKDIR
# environment variable (or the --workingdir command line option).
<% if scope.lookupvar('::singularity::mount_tmp') -%>
mount tmp = yes
<% else -%>
mount tmp = no
<% end -%>


# MOUNT HOSTFS: [BOOL]
# DEFAULT: no
# Probe for all mounted file systems that are mounted on the host, and bind
# those into the container?
<% if scope.lookupvar('::singularity::mount_hostfs') -%>
mount hostfs = yes
<% else -%>
mount hostfs = no
<% end -%>


# BIND PATH: [STRING]
# DEFAULT: Undefined
# Define a list of files/directories that should be made available from within
# the container. The file or directory must exist within the container on
# which to attach to. you can specify a different source and destination
# path (respectively) with a colon; otherwise source and dest are the same.
#bind path = /etc/singularity/default-nsswitch.conf:/etc/nsswitch.conf
#bind path = /opt
#bind path = /scratch
<% bind_path = scope.lookupvar('::singularity::bind_path') -%>
<% if bind_path.is_a?(Array) -%>
<% bind_path.each do |bp| -%>
<% if bp =~ /^\/([^\/\0]+\/*)+$/ -%>
bind path = <%= bp %>
<% elsif bp.is_a?(Hash) -%>
bind path = <%= bp['source'] %>:<%= bp['destination'] %>
<% end -%>
<% end -%>
<% end -%>


# USER BIND CONTROL: [BOOL]
# DEFAULT: yes
# Allow users to influence and/or define bind points at runtime? This will allow
# users to specify bind points, scratch and tmp locations. (note: User bind
# control is only allowed if the host also supports PR_SET_NO_NEW_PRIVS)
<% if scope.lookupvar('::singularity::user_bind_control') -%>
user bind control = yes
<% else -%>
user bind control = no
<% end -%>


# ENABLE OVERLAY: [BOOL]
# DEFAULT: yes
# Enabling this option will make it possible to specify bind paths to locations
# that do not currently exist within the container.
<% if scope.lookupvar('::singularity::enable_overlay') -%>
enable overlay = yes
<% else -%>
enable overlay = no
<% end -%>


# MOUNT SLAVE: [BOOL]
# DEFAULT: yes
# Should we automatically propagate file-system changes from the host?
# This should be set to 'yes' when autofs mounts in the system should
# show up in the container.
<% if scope.lookupvar('::singularity::mount_slave') -%>
mount slave = yes
<% else -%>
mount slave = no
<% end -%>


# SESSIONDIR MAXSIZE: [STRING]
# DEFAULT: 16
# This specifies how large the default sessiondir should be (in MB) and it will
# only affect users who use the "--contain" options and don't also specify a
# location to do default read/writes to (e.g. "--workdir" or "--home").
sessiondir max size = <%= scope.lookupvar('::singularity::sessiondir_max_size') %>


# LIMIT CONTAINER OWNERS: [STRING]
# DEFAULT: NULL
# Only allow containers to be used that are owned by a given user. If this
# configuration is undefined (commented or set to NULL), all containers are
# allowed to be used. This feature only applies when Singularity is running in
# SUID mode and the user is non-root.
#limit container owners = gmk, singularity, nobody
<% limit_container_owners = scope.lookupvar('::singularity::limit_container_owners') -%>
<% if limit_container_owners -%>
limit container owners = <%= limit_container_owners.join(', ') %>
<% end -%>


# LIMIT CONTAINER PATHS: [STRING]
# DEFAULT: NULL
# Only allow containers to be used that are located within an allowed path
# prefix. If this configuration is undefined (commented or set to NULL),
# containers will be allowed to run from anywhere on the file system. This
# feature only applies when Singularity is running in SUID mode and the user is
# non-root.
#limit container paths = /scratch, /tmp, /global
<% limit_container_paths = scope.lookupvar('::singularity::limit_container_paths') -%>
<% if limit_container_paths -%>
limit container paths = <%= limit_container_paths.join(', ') %>
<% end -%>
